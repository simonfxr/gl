### Detect OS/Arch

if(UNIX)
  set(SYS_UNIX TRUE)
endif()

if(WIN32)
  set(SYS_WINDOWS TRUE)
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  set(SYS_LINUX TRUE)
  set(SYS_UNIX TRUE)
endif()

include(CheckTypeSize)
check_type_size(void* SIZEOF_VOID_PTR)
if(${SIZEOF_VOID_PTR} EQUAL "4")
  set(BITS32 TRUE)
elseif(${SIZEOF_VOID_PTR} EQUAL "8")
  set(BITS64 TRUE)
else()
  message(FATAL_ERROR "Unsupported architecture")
  return()
endif()

if(MSVC OR MSVC_IDE OR CMAKE_COMPILER_2005 OR CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set(COMP_MSVC TRUE)
elseif(CMAKE_CXX_COMPILER MATCHES ".*clang[+][+]" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  set(COMP_CLANG TRUE)
  set(COMP_GCCLIKE TRUE)
elseif(CMAKE_CXX_COMPILER MATCHES ".*icpc" OR CMAKE_CXX_COMPILER_ID MATCHES "Intel")
  set(COMP_ICC TRUE)
  set(COMP_GCCLIKE TRUE)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
  set(COMP_GCC TRUE)
  set(COMP_GCCLIKE TRUE)
endif()

if(${CMAKE_BUILD_TYPE} STREQUAL DEBUG)
  set(BUILD_DEBUG TRUE)
elseif(${CMAKE_BUILD_TYPE} STREQUAL RELWITHDEBINFO)
  set(BUILD_OPT TRUE)
  set(BUILD_DEBUG TRUE)
elseif(${CMAKE_BUILD_TYPE} STREQUAL RELEASE)
  set(BUILD_OPT TRUE)
else()
  message(WARNING "unknown build type: \"${BUILD_TYPE}\"")
endif()
